import type { AgenticaUserInputHistory } from "../histories/AgenticaUserInputHistory";

import type { IAgenticaOperationJson } from "./IAgenticaOperationJson";
import type { IAgenticaOperationSelectionJson } from "./IAgenticaOperationSelectionJson";

/**
 * Agentic AI agent prompt.
 *
 * `IAgenticaHistoryJson` is an union type of all possible prompts that
 * can be generated by the AI chatbot of the {@link Agentica} class.
 *
 * In other words, `IAgenticaHistoryJson` is a type of chat history that
 * is occurred during the conversation between the user and the AI
 * chatbot in the {@link Agentica} class.
 *
 * If you want to continue the previous A.I. chatbot session, you can
 * accomplish it by assigning the {@link IAgenticaProps.histories}
 * property when creating a new {@link Agentica} instance.
 *
 * @author Samchon
 */
export type IAgenticaHistoryJson =
  | IAgenticaHistoryJson.IUserInput
  | IAgenticaHistoryJson.IText
  | IAgenticaHistoryJson.ISelect
  | IAgenticaHistoryJson.ICancel
  | IAgenticaHistoryJson.IExecute
  | IAgenticaHistoryJson.IDescribe;
export namespace IAgenticaHistoryJson {
  /**
   * User input prompt.
   *
   * User input prompt about the user's input.
   */
  export interface IUserInput extends IBase<"user_input"> {
    /**
     * User input.
     */
    contents: Array<AgenticaUserInputHistory.Contents>;
  }
  /**
   * Select prompt.
   *
   * Selection prompt about candidate functions to call.
   */
  export interface ISelect extends IBase<"select"> {
    /**
     * ID of the LLM tool call result.
     */
    id: string;

    /**
     * Operations that have been selected.
     */
    selections: IAgenticaOperationSelectionJson[];
  }

  /**
   * Cancel prompt.
   *
   * Cancellation prompt about the candidate functions to be discarded.
   */
  export interface ICancel extends IBase<"cancel"> {
    /**
     * ID of the LLM tool call result.
     */
    id: string;

    /**
     * Operations that have been cancelled.
     */
    selections: IAgenticaOperationSelectionJson[];
  }

  /**
   * Execute prompt.
   *
   * Execution prompt about the LLM function calling.
   */
  export interface IExecute extends IBase<"execute"> {
    /**
     * ID of the LLM tool call result.
     */
    id: string;

    /**
     * Target operation to call.
     */
    operation: IAgenticaOperationJson;

    /**
     * Arguments of the LLM function calling.
     */
    arguments: Record<string, any>;

    /**
     * Return value.
     */
    value: unknown;
  }

  /**
   * Description prompt.
   *
   * Description prompt about the return value of the LLM function calling.
   */
  export interface IDescribe extends IBase<"describe"> {
    /**
     * Executions of the LLM function calling.
     *
     * This prompt describes the return value of them.
     */
    executes: IExecute[];

    /**
     * Description text.
     */
    text: string;
  }

  /**
   * Text prompt.
   */
  export interface IText extends IBase<"text"> {
    /**
     * Role of the orator.
     */
    role: "assistant";

    /**
     * The text content.
     */
    text: string;
  }

  interface IBase<Type extends string> {
    /**
     * Discriminator type.
     */
    type: Type;
  }
}
